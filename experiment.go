package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"

	"github.com/joho/godotenv"
	"github.com/thulasipavankumar/Dynamic-Selenium-Grid-Kubernetes/config"
	"github.com/thulasipavankumar/Dynamic-Selenium-Grid-Kubernetes/pkg/models"
)

var userName, password, database, host string

func init() {
	godotenv.Load("keys.env")
	userName = os.Getenv("DBUserName")
	password = os.Getenv("DBPassword")
	database = os.Getenv("DBDatabase")
	host = os.Getenv("DBHost")
	config.Connect(userName, password, host, database)
	config.GetDB().AutoMigrate(&models.DatabaseModel{})
}
func main() {
	loadImages()
	config.GetDB().NewRecord(models.DatabaseModel{})
	models.AddValuesToDB(models.DatabaseModel{
		SessionID:  "sessionId",
		Service:    "Service",
		Pod:        "Pod",
		Ingress:    "Ingress",
		ServiceUrl: "ServiceUrl",
	})
	fmt.Println("Done")
}

type AutoGenerated struct {
	Hub []struct {
		Resources struct {
			Limits struct {
				CPU    string `json:"cpu"`
				Memory string `json:"memory"`
			} `json:"limits"`
			Requests struct {
				CPU    string `json:"cpu"`
				Memory string `json:"memory"`
			} `json:"requests"`
		} `json:"resources"`
	} `json:"hub"`
	Node struct {
		Chrome []struct {
			Str       map[string]string `json:"omitempty,omitempty"`
			Resources struct {
				Limits struct {
					CPU    string `json:"cpu"`
					Memory string `json:"memory"`
				} `json:"limits"`
				Requests struct {
					CPU    string `json:"cpu"`
					Memory string `json:"memory"`
				} `json:"requests"`
			} `json:"resources"`
		} `json:"chrome"`
		Firefox []struct {
			Str       map[string]string `json:","`
			Resources struct {
				Limits struct {
					CPU    string `json:"cpu"`
					Memory string `json:"memory"`
				} `json:"limits"`
				Requests struct {
					CPU    string `json:"cpu"`
					Memory string `json:"memory"`
				} `json:"requests"`
			} `json:"resources"`
		} `json:"firefox"`
	} `json:"node"`
}
type Pair struct {
	Hub  []map[string]string `json:"hub"`
	Node struct {
		Chrome  []map[string]string `json:"chrome"`
		Firefox []map[string]string `json:"firefox"`
	} `json:"node"`
}

func loadImages() {
	jsonFile, err := os.Open("images.json")
	if err != nil {
		fmt.Println(err)
	}
	byteValue, err := ioutil.ReadAll(jsonFile)
	if err != nil {
		fmt.Println(err)
	}
	auto := &AutoGenerated{}
	err = json.Unmarshal(byteValue, auto)
	pair := &Pair{}
	err = json.Unmarshal(byteValue, pair)
	if err != nil {
		log.Println(err)
	}
	_ = err
}
